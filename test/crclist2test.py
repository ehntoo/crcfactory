#!/usr/bin/python3
import sys
import re
from pprint import pprint

CFILE_TEMPLATE = r"""
/* NOTE: This file was auto-generated by crclist2test.py */
#include <stdio.h>

#define CRCFACTORY_CRC_TYPE <<crc_datatype>>
#define CRCFACTORY_CRCTABLE_TYPE <<table_datatype>>
#include "crcfactory.h"

#define TESTDATA "123456789"
#define TESTDATA_LEN 9

CRCFACTORY_CRCTABLE_TYPE crctable[256];

#define TEST_CRC(desc, func, check) { \
    func##_t_init(crctable); \
    uint64_t r = func((uint8_t *)TESTDATA, TESTDATA_LEN); \
    uint64_t r_t = func##_t(crctable, (uint8_t *)TESTDATA, TESTDATA_LEN); \
    printf("%-20s: %-16lx %-6s : %-16lx %-6s\n", desc, r, (r == check) ? "(OK)" : "(FAIL)", r_t, (r_t == check) ? "(OK)" : "(FAIL)"); \
    test_count += 2; \
    test_failures += (r == check) ? 0 : 1; \
    test_failures += (r_t == check) ? 0 : 1; \
}

<<funcdefs>>

int main(int argc, char *argv[]) {
    int test_count = 0;
    int test_failures = 0;

    printf("%20s  %-23s   %-23s\n", "", "Slow Method", "Fast (table) Method");
    printf("%20s  %-23s   %-23s\n", "", "=======================", "=======================");

<<tests>>

    printf("\nRESULTS: %d tests: %d successes, %d failures\n", test_count, test_count - test_failures, test_failures);
    return test_failures ? 2 : 0;
}
"""

def parse_input(width):
    crcdefs = []
    for line in sys.stdin.readlines():
        # Strip out any comments and extra whitespace
        line = re.sub('^ *#.*', '', line).strip()
        # Skip blank lines
        if not line:
            continue
        # Parse the line as a series of key/value pairs into a dict
        words = line.split()
        info = dict((w.split('=') for w in words))

        if int(info['width']) > width:
            # This entry is a larger width than we want, so skip it.
            continue

        # Generate an appropriate function name based on the CRC name
        func_name = re.sub('[^a-z0-9]', '', info['name'].lower())
        if not func_name.startswith('crc'):
            func_name = 'crc_' + func_name;

        crcdefs.append((func_name, info))
    return crcdefs

def generate_cfile(crcdefs, crc_datatype, table_datatype):
    funcdefs = []
    for func_name, info in crcdefs:
        funcdefs.append("CRCFACTORY_CRCFUNC({}, {}, {}, {}, {}, {});".format(func_name, info['width'], info['refin'], info['poly'], info['init'], info['xorout']))

    funcdefs.append("")
    for func_name, info in crcdefs:
        funcdefs.append("CRCFACTORY_TABLE_CRCFUNC({}_t, {}, {}, {}, {}, {});".format(func_name, info['width'], info['refin'], info['poly'], info['init'], info['xorout']))

    tests = []
    for func_name, info in crcdefs:
        tests.append("    TEST_CRC({}, {}, {});".format(info['name'], func_name, info['check']))

    text = CFILE_TEMPLATE.strip()
    text = text.replace('<<crc_datatype>>', crc_datatype)
    text = text.replace('<<table_datatype>>', table_datatype)
    text = text.replace('<<funcdefs>>', '\n'.join(funcdefs))
    text = text.replace('<<tests>>', '\n'.join(tests))

    print(text)

if __name__ == '__main__':
    width = int(sys.argv[1])
    crc_datatype = sys.argv[2]
    table_datatype = sys.argv[2]
    crcdefs = parse_input(width)
    generate_cfile(crcdefs, crc_datatype, table_datatype)
